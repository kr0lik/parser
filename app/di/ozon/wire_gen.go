// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ozon

import (
	"context"
	"github.com/google/wire"
	"parser/internal/config"
	"parser/internal/config/ozon"
	"parser/internal/domain/ozon/repository"
	"parser/internal/domain/ozon/service"
	"parser/internal/domain/ozon/useCase"
	"parser/internal/infrastructure/log"
	"parser/internal/infrastructure/mongodb"
	"parser/internal/infrastructure/ozon/parser"
	"parser/internal/infrastructure/ozon/storage"
	"parser/internal/infrastructure/selenium"
)

// Injectors from wire.go:

func InitialiseCollectCategories(ctx context.Context) (*useCase.CollectCategories, error) {
	categoryFilter := ozon.ProvideCategoryFilter()
	serverOptions := config.ProvideSeleniumServerOptions()
	chrome, err := selenium.NewChrome(serverOptions, ctx)
	if err != nil {
		return nil, err
	}
	categories := ozon.ProvideCategories()
	logger := log.NewLogger()
	parserCategories := parser.NewCategories(chrome, categories, logger, ctx)
	clientOptions := config.ProvideMongodbClientOptions()
	client, err := mongodb.NewClient(clientOptions, ctx)
	if err != nil {
		return nil, err
	}
	category := storage.NewCategory(client, ctx)
	collectCategories := useCase.NewCollectCategories(categoryFilter, parserCategories, category, logger, ctx)
	return collectCategories, nil
}

func InitialiseCollectProducts(ctx context.Context) (*useCase.CollectProducts, error) {
	v := ozon.ProvideProductFilter()
	serverOptions := config.ProvideSeleniumServerOptions()
	chrome, err := selenium.NewChrome(serverOptions, ctx)
	if err != nil {
		return nil, err
	}
	products := ozon.ProvideProducts()
	logger := log.NewLogger()
	parserProducts := parser.NewProducts(chrome, products, logger, ctx)
	clientOptions := config.ProvideMongodbClientOptions()
	client, err := mongodb.NewClient(clientOptions, ctx)
	if err != nil {
		return nil, err
	}
	category := storage.NewCategory(client, ctx)
	product := storage.NewProduct(client, ctx)
	collectProducts := useCase.NewCollectProducts(v, parserProducts, category, product, logger, ctx)
	return collectProducts, nil
}

// wire.go:

var chromeSet = wire.NewSet(selenium.NewChrome, config.ProvideSeleniumServerOptions)

var categoriesParserSet = wire.NewSet(parser.NewCategories, ozon.ProvideCategories, chromeSet, wire.Bind(new(service.Categories), new(*parser.Categories)))

var productsParserSet = wire.NewSet(parser.NewProducts, ozon.ProvideProducts, chromeSet, wire.Bind(new(service.Products), new(*parser.Products)))

var mongoDbSet = wire.NewSet(mongodb.NewClient, config.ProvideMongodbClientOptions)

var categoryRepositorySet = wire.NewSet(storage.NewCategory, wire.Bind(new(repository.Category), new(*storage.Category)))

var productRepositorySet = wire.NewSet(storage.NewProduct, wire.Bind(new(repository.Product), new(*storage.Product)))

var loggerSet = wire.NewSet(log.NewLogger, wire.Bind(new(service.Log), new(*log.Logger)))
